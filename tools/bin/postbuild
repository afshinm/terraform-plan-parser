#!/usr/bin/env node

/* eslint-disable security/detect-object-injection */

const {
  spawn,
  chalk,
  writeJsonFile,
  readJsonFile,
  ROOT_DIR,
  DIST_DIR,
  ROOT_PACKAGE_JSON_FILE,
  DIST_PACKAGE_JSON_FILE
} = require('../build-util');

function rewritePackageJsonPaths (obj, keys) {
  if (!obj) {
    return;
  }

  if (!keys) {
    keys = Object.keys(obj);
  }

  for (const key of keys) {
    const value = obj[key];
    if (typeof value === 'string') {
      obj[key] = value.replace('./work/dist/', './');
    }
  }
}

async function run () {
  await spawn('cp', ['-r', 'LICENSE', 'index.d.ts', 'src', `${DIST_DIR}/`], { cwd: ROOT_DIR });

  const packageObj = await readJsonFile(ROOT_PACKAGE_JSON_FILE);

  // Remove some properties that we don't need from package.json
  for (const key of [
    'devDependencies',
    'scripts'
  ]) {
    delete packageObj[key];
  }

  // Fix some of the paths
  rewritePackageJsonPaths(packageObj.bin);
  rewritePackageJsonPaths(packageObj, [
    'main',
    'module',
    'jsnext:main'
  ]);

  await writeJsonFile(DIST_PACKAGE_JSON_FILE, packageObj);
  return packageObj;
}

run().then((builtPackage) => {
  console.log(chalk.bold.green(`Built ${builtPackage.name}@${builtPackage.version}`));
}).catch((err) => {
  console.error(chalk.bold.red(`Error building. ${err.stack || err.toString()}`));
});
